// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221128035926_Output-tool-entity-created")]
    partial class Outputtoolentitycreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IdCard")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API.Entities.OutputTool", b =>
                {
                    b.Property<int>("OutputToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutputToolId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OutputDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutputToolStateId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.HasKey("OutputToolId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OutputToolStateId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("OutputTools");
                });

            modelBuilder.Entity("API.Entities.OutputToolState", b =>
                {
                    b.Property<int>("OutputToolStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutputToolStateId"));

                    b.Property<string>("OutputToolStateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutputToolStateId");

                    b.ToTable("OutputToolStates");

                    b.HasData(
                        new
                        {
                            OutputToolStateId = 1,
                            OutputToolStateName = "Open"
                        },
                        new
                        {
                            OutputToolStateId = 2,
                            OutputToolStateName = "Closed"
                        });
                });

            modelBuilder.Entity("API.Entities.Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("OutputToolId")
                        .HasColumnType("int");

                    b.Property<string>("ToolGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToolStateId")
                        .HasColumnType("int");

                    b.HasKey("ToolId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OutputToolId");

                    b.HasIndex("ToolGuid")
                        .IsUnique();

                    b.HasIndex("ToolStateId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("API.Entities.ToolState", b =>
                {
                    b.Property<int>("ToolStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolStateId"));

                    b.Property<string>("ToolStateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToolStateId");

                    b.ToTable("ToolStates");

                    b.HasData(
                        new
                        {
                            ToolStateId = 1,
                            ToolStateName = "Disponible"
                        },
                        new
                        {
                            ToolStateId = 2,
                            ToolStateName = "Con novedad"
                        },
                        new
                        {
                            ToolStateId = 3,
                            ToolStateName = "Prestado"
                        });
                });

            modelBuilder.Entity("API.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            UserRoleName = "AppAdmin"
                        },
                        new
                        {
                            UserRoleId = 2,
                            UserRoleName = "CompanyAdmin"
                        },
                        new
                        {
                            UserRoleId = 3,
                            UserRoleName = "CompanyEmployee"
                        });
                });

            modelBuilder.Entity("API.Entities.UserRoleAppUser", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserRolesAppUsers");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.HasOne("API.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("API.Entities.OutputTool", b =>
                {
                    b.HasOne("API.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.OutputToolState", "OutputToolState")
                        .WithMany()
                        .HasForeignKey("OutputToolStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("OutputToolState");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("API.Entities.Tool", b =>
                {
                    b.HasOne("API.Entities.Company", "Company")
                        .WithMany("Tools")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.OutputTool", null)
                        .WithMany("Tools")
                        .HasForeignKey("OutputToolId");

                    b.HasOne("API.Entities.ToolState", "ToolState")
                        .WithMany()
                        .HasForeignKey("ToolStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ToolState");
                });

            modelBuilder.Entity("API.Entities.UserRoleAppUser", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserRole", "UserRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Company", b =>
                {
                    b.Navigation("Tools");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Entities.OutputTool", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("API.Entities.UserRole", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
